c
n
nn
n
c
n
nn
n
nn
n
c
result["DisplayText"]
result.DisplayText
JSON.parse(response.body)
n
params[:audio_file]
c
result[:DisplayText]
result[DisplayText]
result.DisplayText
n
c
n
@transcription.present?
c
n
nn
n
nn
n
nn
n
nn
n
c
result['DisplayText']
JSON.parse(response.body)
n
c
result['DisplayText']
result
n
c
@transcription
c
@transcription
n
response.body
n
c
response.body
transcription
n
c
n
params[:audio_file]
c
RestClient.post(endpoint, File.read(audio_file.tempfile), headers: headers)
n
params[:audio_file].tempfile.path
n
c
RestClient.post(api_endpoint, File.read(audio_file.tempfile), headers: headers)
n
c
 RestClient.post(api_endpoint, File.read(audio_file.tempfile), headers: headers)
n
c
RestClient.post(api_endpoint, audio_file.tempfile, headers: headers)
n
params[:audio_file].tempfile.path
c
n
speech_region
n
speech_key
n
params[:audio_file]
c
n
params[:audio_file]
c
params[:audio_file]
n
c
n
wav_file_pathn
system("ffmpeg -i #{Shellwords.escape(mp3_file_path)} -acodec pcm_s16le -ar 16000 #{Shellwords.escape(wav_file_path)}")
n
system("ffmpeg -i #{Shellwords.escape(mp3_file_path)} -acodec pcm_s16le -ar 16000 #{Shellwords.escape(wav_file_path)}")
Rails.root.join('tmp', "#{SecureRandom.hex}.wav").to_s
n
wav_file_path
headers
n
c
n
nnnnnnn
n
c
n
c
n
c
File.read(wav_file_path)
n
c
wav_file_path.present?
wav_file_path.exist?
File.exist?(wav_file_path)
File.exist?
n
c
params[:audio_file]
n
c
n
convert_mp3_to_wav(audio_file_path)
n
c
n
c
result
File.read(audio_file_path)
endpoint
response
n
params[:audio_file].tempfile.path
n
c
n
c
n
c
params[:audio_file]
audio_file_path
n
c
@audio_file_url
c
@audio_file_url
c
request.format.html?
request.format.xhr?
request.format.html?
c
request.format.html?
request.format
request
c
n
@audio_file_url
c
n
audio_data
n
nn
n
c
output.mp3'
@audio_file_url
n
text
n
c
n
c
c\
n
text
n
c
n
audio_data
n
text
n
c
n
nnnnnnnnnnnnnn
n
public/output.mp3
response.body
audio_data
n
c
params[:text]
params
c
n
c
@product.image.attach(params[:product][:image]) if params[:product][:image].present?
n
params[:image]
params
c
User.find(current_user.id)
c
params
c
User.find_by(email: params[:email])
User.find_by(params[:email])
c
x
c
User.find_by(params[:email])
params[:email]
c
UserMailer.with(reciever: params[:email]).welcome_email.deliver_later
@user
User.find_by(email: params[:email])
n
User.find_by(email: params[:email])
params
User.find_by(email: params[:email])
c
User.find_by(params[:email])
params
c
current_user.id
c
params
c
params[:reciever]
c
params
c
params
c
n
Product.new(product_params)
product_params
@product
